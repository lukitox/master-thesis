@startuml

Femodel "1" o-- "1..*" Material
Femodel "1" o-- "1" MapdlConsole
'Material "1" o-- "1" MapdlConsole
'Femodel <-[dotted]-> PrepFunctions : uses
Femodel <-[dotted]-> PostFunctions : uses

class Femodel{
  -__element_aoa_vector: np.array
  -__element_chord_vector: np.array
  -__element_data: DataFrame
  +mapdl: MapdlConsole
  -__materials: Dict
  +propeller: Propeller
  --
  -__apply_loads__(self)
  -__change_design_variables__(self, *args, **kwargs)
  -__clear__(self)
  -__get_edges__(self, y: Float): le: np.array, te: np.array, length: Float
  -__init__(self, mapdl: MapdlConsole, propeller: Propeller, loads: Loadcase, mesh_density_factor = 1: Float, seltol = 1e-4: Float)
  -__setup__(self, loads: Loadcase, mesh_density_factor: Float, seltol: Float)
  -__solve__(self)
  -__post_processing__(self)
  +cdread(self)
  +evaluate(self, x: List): f: List, g: List, h: List
  ..Getter..
  +element_aoa_vector(self): np.array
  +element_chord_vevtor(self): np.array
  +element_data(self): DataFrame
  +materials(self): Dict
  ..Setter..
  +materials(self, materials)
  
}

class MapdlConsole{}

class Material{
  -__fc: Dict
  +mapdl: MapdlConsole
  -__mp: Dict
  -__name: Str
  -__number: Int
  -__path: Str
  --
  -__init__(self, mapdl: MapdlConsole, name: Str, number: Int)
  +assign_mp(self)
  +assign_fc(self)
  +load(self, filename: Str)
  +read_csv(self, filename: Str)
  +save(self)
  ..Getter..
  +fc(self): Dict
  +mp(self): Dict
  +name(self): Str
  +number(self): Int
  ..Setter..
  +fc(self, fc: Dict)
  +mp(self, mp: Dict)
  +name(self, name: Str)
  +number(self, number: Str)
}

'class PrepFunctions << (M,orchid) >> {
'  +{static}get_edges(mapdl: MapdlConsole, x: List): le: List, te: List
'}

class PostFunctions << (M,orchid) >> {
  +{static}fc_puck(mapdl: MapdlConsole): I: List
}

@enduml